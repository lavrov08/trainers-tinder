"""–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤"""
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from database.models import Trainer


async def send_trainer_card(
    message, 
    trainer: Trainer, 
    keyboard,
    prefix: str = "",
    status_info: str = None,
    should_delete_previous: bool = False,
    state: FSMContext = None
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞
    
    Args:
        message: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery
        trainer: –û–±—ä–µ–∫—Ç Trainer
        keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞")
        status_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        should_delete_previous: –£–¥–∞–ª—è—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    # –î–ª—è CallbackQuery –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å message.photo
    is_photo = False
    if hasattr(message, 'photo'):
        is_photo = bool(message.photo)
    elif hasattr(message, 'message') and hasattr(message.message, 'photo'):
        is_photo = bool(message.message.photo)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–ª—è "–û —Å–µ–±–µ"
    if prefix:
        main_text = f"{prefix}\n\n"
    else:
        main_text = ""
    
    main_text += (
        f"<b>{trainer.name}</b>\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {trainer.age} –ª–µ—Ç\n"
        f"–û–ø—ã—Ç: {trainer.experience}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trainer.direction}"
    )
    
    if status_info:
        main_text += f"\n\n{status_info}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç + –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ª–∏–º–∏—Ç
    full_text = main_text + f"\n\n<b>–û —Å–µ–±–µ:</b>\n{trainer.about}"
    
    if len(full_text) <= 1024:
        # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await _send_single_message(message, trainer, full_text, keyboard, should_delete_previous, is_photo, state)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        await _send_split_message(message, trainer, main_text, keyboard, should_delete_previous, is_photo, state)


async def _send_single_message(
    message, 
    trainer: Trainer, 
    text: str, 
    keyboard, 
    should_delete_previous: bool, 
    is_photo: bool,
    state: FSMContext
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_to_send = message if not hasattr(message, 'message') else message.message
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if trainer.photo_id:
            # –î–ª—è callback —Å —Ñ–æ—Ç–æ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_photo and hasattr(message, 'message'):
                try:
                    await message.message.delete()
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if should_delete_previous:
                if state:
                    data = await state.get_data()
                    previous_message_id = data.get('previous_message_id')
                    previous_main_message_id = data.get('previous_main_message_id')
                    
                    await _delete_previous_messages(message, previous_main_message_id, previous_message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            sent_message = await message_to_send.answer_photo(
                photo=trainer.photo_id,
                caption=text,
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if state:
                current_message_id = sent_message.message_id
                current_main_message_id = None
                await state.update_data(
                    current_message_id=current_message_id,
                    current_main_message_id=current_main_message_id
                )
                print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {current_message_id}")
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ
            if is_photo:
                try:
                    # –ï—Å–ª–∏ —ç—Ç–æ callback, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ message
                    if hasattr(message, 'message'):
                        await message.message.delete()
                    else:
                        await message.delete()
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if should_delete_previous:
                if state:
                    data = await state.get_data()
                    previous_message_id = data.get('previous_message_id')
                    previous_main_message_id = data.get('previous_main_message_id')
                    
                    await _delete_previous_messages(message, previous_main_message_id, previous_message_id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
            sent_message = await message_to_send.answer(text, reply_markup=keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if state:
                current_message_id = sent_message.message_id
                current_main_message_id = None
                await state.update_data(
                    current_message_id=current_message_id,
                    current_main_message_id=current_main_message_id
                )
                print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ: {current_message_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
        try:
            message_to_send = message if not hasattr(message, 'message') else message.message
            sent_message = await message_to_send.answer(text, reply_markup=keyboard)
            if state:
                await state.update_data(current_message_id=sent_message.message_id)
        except Exception as e2:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")


async def _send_split_message(
    message, 
    trainer: Trainer, 
    main_text: str, 
    keyboard, 
    should_delete_previous: bool, 
    is_photo: bool,
    state: FSMContext
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ)"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_to_send = message if not hasattr(message, 'message') else message.message
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if should_delete_previous and state:
            data = await state.get_data()
            previous_message_id = data.get('previous_message_id')
            previous_main_message_id = data.get('previous_main_message_id')
            
            await _delete_previous_messages(message, previous_main_message_id, previous_message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if trainer.photo_id:
            main_message = await message_to_send.answer_photo(
                photo=trainer.photo_id,
                caption=main_text
            )
        else:
            main_message = await message_to_send.answer(main_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        about_message = await message_to_send.answer(
            f"<b>–û —Å–µ–±–µ:</b>\n{trainer.about}",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if state:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ ID –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            data = await state.get_data()
            current_message_id = data.get('current_message_id')
            current_main_message_id = data.get('current_main_message_id')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–º, —Ç–∞–∫ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º)
            if current_main_message_id:
                # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
                await state.update_data(
                    previous_message_id=current_message_id,
                    previous_main_message_id=current_main_message_id
                )
                print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ ID (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ) - main: {current_main_message_id}, about: {current_message_id}")
            elif current_message_id:
                # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º
                await state.update_data(
                    previous_message_id=current_message_id,
                    previous_main_message_id=None
                )
                print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π ID (–æ–¥–∏–Ω–æ—á–Ω–æ–µ) - about: {current_message_id}")
            
            # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ ID –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await state.update_data(
                current_message_id=about_message.message_id,
                current_main_message_id=main_message.message_id
            )
            print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–æ–≤—ã–µ ID (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ) - main: {main_message.message_id}, about: {about_message.message_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–º
        try:
            message_to_send = message if not hasattr(message, 'message') else message.message
            sent_message = await message_to_send.answer(
                f"{main_text}\n\n<b>–û —Å–µ–±–µ:</b>\n{trainer.about}",
                reply_markup=keyboard
            )
            if state:
                await state.update_data(current_message_id=sent_message.message_id)
        except Exception as e2:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")


async def _delete_previous_messages(message, previous_main_message_id, previous_message_id):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    print(f"DEBUG: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - main: {previous_main_message_id}, about: {previous_message_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bot –æ–±—ä–µ–∫—Ç
    bot = None
    chat_id = None
    
    if hasattr(message, 'bot'):
        bot = message.bot
        chat_id = message.chat.id
    elif hasattr(message, 'message'):
        bot = message.message.bot
        chat_id = message.message.chat.id
    
    if not bot:
        print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å bot –æ–±—ä–µ–∫—Ç")
        return
    
    if previous_main_message_id:
        try:
            await bot.delete_message(chat_id, previous_main_message_id)
            print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {previous_main_message_id}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {previous_main_message_id}: {e}")
    
    if previous_message_id:
        try:
            await bot.delete_message(chat_id, previous_message_id)
            print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ {previous_message_id}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ {previous_message_id}: {e}")

