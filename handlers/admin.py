"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import Database
from keyboards.inline import (
    get_moderation_keyboard,
    get_admin_stats_keyboard,
    get_direction_stats_keyboard,
    get_trainers_list_keyboard,
    get_trainer_detail_keyboard,
    get_confirm_delete_keyboard,
    get_back_to_trainer_keyboard,
    get_cancel_keyboard
)
from config import ADMIN_IDS, TRAINING_DIRECTIONS
from states import AdminAddLikes

router = Router()


async def send_admin_trainer_card_smart(message, trainer, keyboard):
    """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø–æ–ª—é '–û —Å–µ–±–µ'"""
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–ª—è "–û —Å–µ–±–µ"
    main_text = (
        "üÜï <b>–ê–Ω–∫–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"<b>–ò–º—è:</b> {trainer.name}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {trainer.age} –ª–µ—Ç\n"
        f"<b>–û–ø—ã—Ç:</b> {trainer.experience}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trainer.direction}\n\n"
        f"<b>Username:</b> @{trainer.username if trainer.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>User ID:</b> {trainer.user_id}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç + –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ª–∏–º–∏—Ç
    full_text = main_text + f"\n\n<b>–û —Å–µ–±–µ:</b>\n{trainer.about}"
    
    if len(full_text) <= 1024:
        # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try:
            if trainer.photo_id:
                await message.answer_photo(
                    photo=trainer.photo_id,
                    caption=full_text,
                    reply_markup=keyboard
                )
            else:
                await message.answer(
                    full_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã {trainer.id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
            await message.answer(full_text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        try:
            if trainer.photo_id:
                await message.answer_photo(
                    photo=trainer.photo_id,
                    caption=main_text
                )
            else:
                await message.answer(main_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                f"<b>–û —Å–µ–±–µ:</b>\n{trainer.about}",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã {trainer.id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–º
            await message.answer(full_text, reply_markup=keyboard)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


@router.message(Command("stats"))
async def cmd_stats(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await state.clear()
    
    await message.answer(
        "üìä <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_stats_keyboard()
    )


@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await state.clear()
    
    await message.answer(
        "üìä <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_stats_keyboard()
    )


@router.callback_query(F.data == "admin_stats")
async def process_admin_stats(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_stats_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_trainers_by_direction")
async def process_trainers_by_direction(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:",
        reply_markup=get_direction_stats_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_dir:"))
async def process_admin_direction(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    direction = callback.data.split(":", 1)[1]
    trainers = await db.get_approved_trainers_by_direction(direction)
    
    if not trainers:
        await callback.message.edit_text(
            f"üìã <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}</b>\n\n"
            "–¢—Ä–µ–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_direction_stats_keyboard()
        )
        await callback.answer()
        return
    
    text = f"üìã <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}</b>\n\n"
    text += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: {len(trainers)}\n\n"
    
    for i, trainer in enumerate(trainers, 1):
        likes_count = len(await db.get_trainer_likes(trainer.id))
        text += f"{i}. {trainer.name} ({trainer.age} –ª–µ—Ç) - ‚ù§Ô∏è {likes_count}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for trainer in trainers:
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {trainer.name}",
                callback_data=f"admin_trainer_dir:{trainer.id}:{direction}"
            )
        )
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="admin_trainers_by_direction"
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "admin_all_trainers")
async def process_all_trainers(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainers = await db.get_all_approved_trainers()
    
    if not trainers:
        await callback.message.edit_text(
            "üìã <b>–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã</b>\n\n"
            "–¢—Ä–µ–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_stats_keyboard()
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
    by_direction = {}
    for trainer in trainers:
        if trainer.direction not in by_direction:
            by_direction[trainer.direction] = []
        by_direction[trainer.direction].append(trainer)
    
    text = "üìã <b>–í—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã</b>\n\n"
    for direction in TRAINING_DIRECTIONS:
        if direction in by_direction:
            text += f"<b>{direction}:</b> {len(by_direction[direction])}\n"
    
    text += f"\n<b>–í—Å–µ–≥–æ:</b> {len(trainers)}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    for trainer in trainers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        likes_count = len(await db.get_trainer_likes(trainer.id))
        builder.row(
            InlineKeyboardButton(
                text=f"{trainer.name} ({trainer.direction}) - ‚ù§Ô∏è {likes_count}",
                callback_data=f"admin_trainer:{trainer.id}"
            )
        )
    
    if len(trainers) > 10:
        builder.row(
            InlineKeyboardButton(
                text=f"... –∏ –µ—â–µ {len(trainers) - 10} —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
                callback_data="admin_all_trainers"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data="admin_stats"
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("admin_trainer_dir:"))
async def process_trainer_detail_from_dir(callback: CallbackQuery, db: Database):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    parts = callback.data.split(":", 2)
    trainer_id = int(parts[1])
    direction = parts[2]
    
    await show_trainer_detail(callback, db, trainer_id, direction)


@router.callback_query(F.data.startswith("admin_trainer:"))
async def process_trainer_detail(callback: CallbackQuery, db: Database):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    await show_trainer_detail(callback, db, trainer_id)


async def show_trainer_detail(callback: CallbackQuery, db: Database, trainer_id: int, from_direction: str = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ"""
    trainer = await db.get_trainer_by_id(trainer_id)
    
    if not trainer:
        await callback.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    likes = await db.get_trainer_likes(trainer_id)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–ª—è "–û —Å–µ–±–µ"
    main_text = (
        f"üë§ <b>–î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        f"<b>–ò–º—è:</b> {trainer.name}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {trainer.age} –ª–µ—Ç\n"
        f"<b>–û–ø—ã—Ç:</b> {trainer.experience}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trainer.direction}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {trainer.status}\n"
        f"<b>Username:</b> @{trainer.username if trainer.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>User ID:</b> {trainer.user_id}\n\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:</b> {len(likes)}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç + –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ª–∏–º–∏—Ç
    full_text = main_text + f"\n\n<b>–û —Å–µ–±–µ:</b>\n{trainer.about}"
    
    keyboard = get_trainer_detail_keyboard(trainer_id, from_direction)
    
    if len(full_text) <= 1024:
        # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
            if trainer.photo_id:
                await callback.message.answer_photo(
                    photo=trainer.photo_id,
                    caption=full_text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(full_text, reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–µ—Ä–∞ {trainer.id}: {e}")
            await callback.message.answer(full_text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        try:
            await callback.message.delete()
            if trainer.photo_id:
                await callback.message.answer_photo(
                    photo=trainer.photo_id,
                    caption=main_text
                )
            else:
                await callback.message.answer(main_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await callback.message.answer(
                f"<b>–û —Å–µ–±–µ:</b>\n{trainer.about}",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–µ—Ä–∞ {trainer.id}: {e}")
            await callback.message.answer(full_text, reply_markup=keyboard)
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin_likes:"))
async def process_admin_likes(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    trainer = await db.get_trainer_by_id(trainer_id)
    likes = await db.get_trainer_likes(trainer_id)
    
    if not likes:
        text = f"üíï <b>–õ–∞–π–∫–∏ –¥–ª—è {trainer.name}</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤."
    else:
        text = f"üíï <b>–õ–∞–π–∫–∏ –¥–ª—è {trainer.name}</b>\n\n"
        text += f"–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {len(likes)}\n\n"
        for i, like in enumerate(likes, 1):
            contact = f"@{like.client_username}" if like.client_username else f"ID: {like.client_id}"
            text += f"{i}. {contact}\n"
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=get_back_to_trainer_keyboard(trainer_id)
        )
    else:
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_trainer_keyboard(trainer_id)
        )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_delete:"))
async def process_admin_delete(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∞–Ω–∫–µ—Ç—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_keyboard(trainer_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def process_confirm_delete(callback: CallbackQuery, bot: Bot, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    trainer = await db.get_trainer_by_id(trainer_id)
    
    if trainer:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        try:
            await bot.send_message(
                trainer.user_id,
                "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start"
            )
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
        await db.delete_trainer(trainer_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ <b>{trainer.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_admin_stats_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_admin_stats_keyboard()
        )
    
    await callback.answer()


# === –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç ===

@router.callback_query(F.data.startswith("approve:"))
async def process_approve(callback: CallbackQuery, bot: Bot, db: Database):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    trainer = await db.get_trainer_by_id(trainer_id)
    
    if not trainer:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_trainer_status(trainer_id, "approved")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    try:
        await bot.send_message(
            trainer.user_id,
            "‚úÖ <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω–µ—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É."
        )
    except Exception:
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–Ω–∫–µ—Ç —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption, –±–µ–∑ —Ñ–æ—Ç–æ - text)
    if callback.message.photo:
        await callback.message.edit_caption(
            caption=callback.message.caption + "\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b>"
        )
    else:
        await callback.message.edit_text(
            text=callback.message.text + "\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b>"
        )
    await callback.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data.startswith("reject:"))
async def process_reject(callback: CallbackQuery, bot: Bot, db: Database):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    trainer_id = int(callback.data.split(":", 1)[1])
    trainer = await db.get_trainer_by_id(trainer_id)
    
    if not trainer:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_trainer_status(trainer_id, "rejected")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    try:
        await bot.send_message(
            trainer.user_id,
            "‚ùå <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "- –£–∫–∞–∑–∞–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n"
            "- –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start"
        )
    except Exception:
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–Ω–∫–µ—Ç —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption, –±–µ–∑ —Ñ–æ—Ç–æ - text)
    if callback.message.photo:
        await callback.message.edit_caption(
            caption=callback.message.caption + "\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>"
        )
    else:
        await callback.message.edit_text(
            text=callback.message.text + "\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>"
        )
    await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", show_alert=True)


# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===

@router.callback_query(F.data == "admin_add_likes")
async def process_admin_add_likes_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∏—Å–ª–∏—Ç—å –ª–∞–π–∫–∏'"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞ (—Å @) –∏–ª–∏ –µ–≥–æ User ID:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>@john_doe</code>\n"
        "–∏–ª–∏\n"
        "<code>123456789</code>",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminAddLikes.waiting_for_user)
    await callback.answer()


@router.callback_query(F.data == "admin_cancel")
async def process_admin_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    await state.clear()
    
    await callback.message.edit_text(
        "üìä <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_stats_keyboard()
    )
    await callback.answer()


@router.message(AdminAddLikes.waiting_for_user)
async def process_admin_user_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username –∏–ª–∏ user_id"""
    if not is_admin(message.from_user.id):
        return
    
    user_identifier = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, username –∏–ª–∏ user_id
    client = None
    if user_identifier.startswith("@"):
        # –≠—Ç–æ username
        username = user_identifier[1:]  # –£–±–∏—Ä–∞–µ–º @
        client = await db.get_client_by_username(username)
        if not client:
            await message.answer(
                f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':",
                reply_markup=get_cancel_keyboard()
            )
            return
        user_id = client.user_id
    else:
        # –≠—Ç–æ user_id
        try:
            user_id = int(user_identifier)
            client = await db.get_client(user_id)
            if not client:
                await message.answer(
                    f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':",
                    reply_markup=get_cancel_keyboard()
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ username (—Å @) –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π User ID.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':",
                reply_markup=get_cancel_keyboard()
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    current_likes = await db.get_client_likes(user_id)
    await state.update_data(
        user_identifier=user_identifier,
        user_id=user_id,
        current_likes=current_likes
    )
    await state.set_state(AdminAddLikes.waiting_for_amount)
    
    await message.answer(
        f"‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {user_identifier}\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{current_likes}</b> –ª–∞–π–∫–æ–≤\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )


@router.message(AdminAddLikes.waiting_for_amount)
async def process_admin_amount_input(message: Message, state: FSMContext, bot: Bot, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        likes_amount = int(message.text.strip())
        if likes_amount <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':",
                reply_markup=get_cancel_keyboard()
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞':",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    user_identifier = data['user_identifier']
    user_id = data['user_id']
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –ª–∞–π–∫–∏
    await db.add_client_likes(user_id, likes_amount)
    new_balance = await db.get_client_likes(user_id)
    
    await state.clear()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await message.answer(
        f"‚úÖ <b>–õ–∞–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_identifier}\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+{likes_amount}</b> –ª–∞–π–∫–æ–≤\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> –ª–∞–π–∫–æ–≤",
        reply_markup=get_admin_stats_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await bot.send_message(
            user_id,
            f"üéâ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ª–∞–π–∫–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+{likes_amount}</b> –ª–∞–π–∫–æ–≤\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> –ª–∞–π–∫–æ–≤\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞!"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")


@router.callback_query(F.data == "admin_pending_trainers")
async def process_admin_pending_trainers(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    pending_trainers = await db.get_pending_trainers()
    
    if not pending_trainers:
        await callback.message.edit_text(
            "üìã <b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_admin_stats_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üìã <b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {len(pending_trainers)}\n\n"
        f"–ê–Ω–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ —á–∞—Ç."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∞–Ω–∫–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for trainer in pending_trainers:
        keyboard = get_moderation_keyboard(trainer.id)
        await send_admin_trainer_card_smart(callback.message, trainer, keyboard)
    
    # –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    await callback.message.answer(
        "–í—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ ‚òùÔ∏è",
        reply_markup=get_admin_stats_keyboard()
    )
    await callback.answer()


@router.message(Command("addlikes"))
async def cmd_add_likes(message: Message, bot: Bot, db: Database):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: /addlikes @username 15 –∏–ª–∏ /addlikes user_id 15
    args = message.text.split()
    
    if len(args) < 3:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/addlikes @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n"
            "–∏–ª–∏\n"
            "<code>/addlikes user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/addlikes @john_doe 15</code>\n"
            "<code>/addlikes 123456789 15</code>"
        )
        return
    
    user_identifier = args[1]
    
    try:
        likes_amount = int(args[2])
        if likes_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, username –∏–ª–∏ user_id
    client = None
    if user_identifier.startswith("@"):
        # –≠—Ç–æ username
        username = user_identifier[1:]  # –£–±–∏—Ä–∞–µ–º @
        client = await db.get_client_by_username(username)
        if not client:
            await message.answer(
                f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
            )
            return
        user_id = client.user_id
    else:
        # –≠—Ç–æ user_id
        try:
            user_id = int(user_identifier)
            client = await db.get_client(user_id)
            if not client:
                await message.answer(
                    f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
                )
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.")
            return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –ª–∞–π–∫–∏
    await db.add_client_likes(user_id, likes_amount)
    new_balance = await db.get_client_likes(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await message.answer(
        f"‚úÖ <b>–õ–∞–π–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_identifier}\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: +{likes_amount} –ª–∞–π–∫–æ–≤\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –ª–∞–π–∫–æ–≤"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await bot.send_message(
            user_id,
            f"üéâ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ª–∞–π–∫–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+{likes_amount}</b> –ª–∞–π–∫–æ–≤\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> –ª–∞–π–∫–æ–≤\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞!"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")

