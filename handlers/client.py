"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from database import Database
from keyboards.inline import get_directions_keyboard, get_trainer_view_keyboard, get_refill_tariffs_keyboard
from config import ADMIN_IDS, PLACEMENT_COST

router = Router()


async def format_trainer_card(trainer, current_index: int, total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    return (
        f"<b>{trainer.name}</b>\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {trainer.age} –ª–µ—Ç\n"
        f"–û–ø—ã—Ç: {trainer.experience}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trainer.direction}\n\n"
        f"<b>–û —Å–µ–±–µ:</b>\n{trainer.about}\n\n"
        f"–ê–Ω–∫–µ—Ç–∞ {current_index + 1}/{total}"
    )


@router.callback_query(F.data.startswith("client_direction:"))
async def process_client_direction(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º"""
    direction = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    trainers = await db.get_approved_trainers_by_direction(direction)
    
    if not trainers:
        await callback.message.edit_text(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ <b>{direction}</b>.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=get_directions_keyboard(prefix="client_direction")
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(
        direction=direction,
        trainers=[t.id for t in trainers],
        current_index=0
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    await show_trainer(callback.message, db, state, callback.from_user.id)
    await callback.answer()


async def show_trainer(message, db: Database, state: FSMContext, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É —Ç—Ä–µ–Ω–µ—Ä–∞"""
    data = await state.get_data()
    trainers_ids = data.get("trainers", [])
    current_index = data.get("current_index", 0)
    
    if not trainers_ids:
        await message.edit_text(
            "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=get_directions_keyboard(prefix="client_direction")
        )
        return
    
    trainer_id = trainers_ids[current_index]
    trainer = await db.get_trainer_by_id(trainer_id)
    
    if not trainer:
        await message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    already_liked = await db.check_like_exists(user_id, trainer_id)
    
    text = await format_trainer_card(trainer, current_index, len(trainers_ids))
    keyboard = get_trainer_view_keyboard(
        trainer_id, current_index, len(trainers_ids), already_liked
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
    if trainer.photo_id:
        try:
            if message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                await message.edit_media(
                    media=InputMediaPhoto(media=trainer.photo_id, caption=text),
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                await message.delete()
                await message.answer_photo(
                    photo=trainer.photo_id,
                    caption=text,
                    reply_markup=keyboard
                )
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await message.edit_text(text, reply_markup=keyboard)
    else:
        # –ë–µ–∑ —Ñ–æ—Ç–æ
        try:
            if message.photo:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ –Ω–æ–≤–æ–µ –±–µ–∑ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.delete()
                await message.answer(text, reply_markup=keyboard)
            else:
                await message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("next:"))
async def process_next_trainer(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π'"""
    data = await state.get_data()
    trainers_ids = data.get("trainers", [])
    current_index = data.get("current_index", 0)
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
    new_index = (current_index + 1) % len(trainers_ids)
    await state.update_data(current_index=new_index)
    
    await show_trainer(callback.message, db, state, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data.startswith("prev:"))
async def process_prev_trainer(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    data = await state.get_data()
    trainers_ids = data.get("trainers", [])
    current_index = data.get("current_index", 0)
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
    new_index = (current_index - 1) % len(trainers_ids)
    await state.update_data(current_index=new_index)
    
    await show_trainer(callback.message, db, state, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data.startswith("like:"))
async def process_like(callback: CallbackQuery, bot: Bot, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞"""
    trainer_id = int(callback.data.split(":", 1)[1])
    client_id = callback.from_user.id
    client_username = callback.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫
    already_liked = await db.check_like_exists(client_id, trainer_id)
    
    if already_liked:
        await callback.answer("–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    likes_count = await db.get_client_likes(client_id)
    if likes_count < 1:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∞–π–∫–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–∞–π–∫–∏' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            show_alert=True
        )
        return
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    success = await db.decrease_client_likes(client_id, 1)
    
    if not success:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∞–π–∫–æ–≤!", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
    like_success = await db.add_like(client_id, client_username, trainer_id)
    
    if like_success:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ
        trainer = await db.get_trainer_by_id(trainer_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
        if trainer:
            contact_info = f"@{client_username}" if client_username else f"ID: {client_id}"
            try:
                await bot.send_message(
                    trainer.user_id,
                    f"‚ù§Ô∏è <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π –ª–∞–π–∫!</b>\n\n"
                    f"–ö–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n"
                    f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!"
                )
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        new_likes_count = await db.get_client_likes(client_id)
        
        await callback.answer(
            f"‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—Ä–µ–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ª–∞–π–∫–æ–≤: {new_likes_count}",
            show_alert=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await show_trainer(callback.message, db, state, client_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∞–π–∫ –æ–±—Ä–∞—Ç–Ω–æ
        await db.add_client_likes(client_id, 1)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞.", show_alert=True)


@router.callback_query(F.data == "already_liked")
async def process_already_liked(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–∂–µ –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await callback.answer("–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞!", show_alert=True)


@router.callback_query(F.data == "back_to_directions")
async def process_back_to_directions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å —Ñ–æ—Ç–æ
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=get_directions_keyboard(prefix="client_direction")
    )
    await callback.answer()


@router.callback_query(F.data == "check_likes")
async def process_check_likes(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤"""
    user_id = callback.from_user.id
    likes_count = await db.get_client_likes(user_id)
    
    await callback.answer(
        f"üíñ –£ –≤–∞—Å {likes_count} –ª–∞–π–∫–æ–≤",
        show_alert=True
    )


@router.callback_query(F.data == "refill_likes")
async def process_refill_likes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤"""
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–æ–≤
    tariff_5 = PLACEMENT_COST // 2
    tariff_15 = PLACEMENT_COST
    tariff_30 = PLACEMENT_COST * 2
    
    await callback.message.answer(
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
        f"üîπ <b>5 –ª–∞–π–∫–æ–≤</b> ‚Äî {tariff_5} —Ä—É–±–ª–µ–π\n"
        f"üîπ <b>15 –ª–∞–π–∫–æ–≤</b> ‚Äî {tariff_15} —Ä—É–±–ª–µ–π\n"
        f"üîπ <b>30 –ª–∞–π–∫–æ–≤</b> ‚Äî {tariff_30} —Ä—É–±–ª–µ–π\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=get_refill_tariffs_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("tariff:"))
async def process_tariff_selection(callback: CallbackQuery, bot: Bot, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    likes_amount = int(callback.data.split(":", 1)[1])
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if likes_amount == 5:
        cost = PLACEMENT_COST // 2
    elif likes_amount == 15:
        cost = PLACEMENT_COST
    elif likes_amount == 30:
        cost = PLACEMENT_COST * 2
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{likes_amount} –ª–∞–π–∫–æ–≤</b> –∑–∞ {cost} —Ä—É–±–ª–µ–π\n\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ª–∞–π–∫–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    contact_info = f"@{username}" if username else f"ID: {user_id}"
    admin_text = (
        "üí∞ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {contact_info}\n"
        f"<b>User ID:</b> <code>{user_id}</code>\n"
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {likes_amount} –ª–∞–π–∫–æ–≤\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost} —Ä—É–±–ª–µ–π\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        f"/addlikes {username if username else user_id} {likes_amount}"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "cancel_refill")
async def process_cancel_refill(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.message.delete()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

